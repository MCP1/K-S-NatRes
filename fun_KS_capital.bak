/******************************************************************************

	CAPITAL-GOODS MARKET OBJECT EQUATIONS
	-------------------------------------

	Equations that are specific to the capital-goods market objects in the 
	K+S LSD model are coded below.
 
 ******************************************************************************/

/*============================== KEY EQUATIONS ===============================*/

EQUATION( "L1" )
/*
Work force (labor) size employed by capital-good sector
Updates 'L1rd'
*/

// Public firms are included in L1d - Think about rules.
v[1] = VS( LABSUPL1, "Ls" );					// available labor force
v[2] = V( "L1rd" );								// R&D labor in sector 1
v[3] = V( "L1d" );								// desired workers in sector 1
v[4] = VS( CONSECL1, "L2d" );					// desired workers in sector 2
v[5] = V( "L1shortMax" );						// max shortage allowed in sector

v[2] = min( v[2], v[1] );						// ignore demand over total labor
v[3] = min( v[3], v[1] );
v[4] = min( v[4], v[1] );

if ( v[1] - v[2] < v[3] + v[4] )				// labor shortage?
{
	v[6] = ( v[1] - v[2] ) / ( v[3] + v[4] );	// shortage factor
	
	if ( v[6] < 1 - v[5] )						// over cap?
		v[6] = 1 - v[5];						// shortage on cap
}
else
	v[6] = 1;									// no shortage

RESULT( v[2] + ( v[3] - v[2] ) * v[6] )
// ISNT IT V[1]-V[2]? 
// No, v[1] (Ls) is the total supply and v[2] (L1rd) is just the R&D people in sector 1


EQUATION( "MC1" )
/*
Market conditions index for entry in capital-good sector
*/
RESULT( log( max( VL( "NW1", 1 ), 0 ) + 1 ) - log( VL( "Deb1", 1 ) + 1 ) )


EQUATION( "entry1exit" )
/*
Perform entry and exit of firms in the capital-good sector
All relevant aggregate variables in sector must be computed before existing
firms are deleted, so all active firms in period are considered
*/

VS( CONSECL1, "K" );							// ensure canceled orders acct'd
UPDATE;											// ensure aggregates are computed

double MC1 = V( "MC1" );						// market conditions in sector 1
double MC1_1 = VL( "MC1", 1 );					// market conditions in sector 1
double NW10u = V( "NW10" ) * V( "PPI" ) / V( "PPI0" );// minimum wealth in s. 1
double n1 = V( "n1" );							// market participation period
double omicron = VS( PARENT, "omicron" );		// entry sensitivity to mkt cond
double stick = VS( PARENT, "stick" );			// stickiness in number of firms
double x2inf = VS( PARENT, "x2inf" );			// entry lower distrib. support
double x2sup = VS( PARENT, "x2sup" );			// entry upper distrib. support
int F1 = V( "F1" );								// current number of firms
int F10 = V( "F10" );							// initial number of firms
int F1max = V( "F1max" );						// max firms in sector 1
int F1min = V( "F1min" );						// min firms in sector 1

vector < bool > quit( F1, false );				// vector of firms' quit status

// mark bankrupt and market-share-irrelevant firms to quit the market
h = F1;											// initial number of firms
v[1] = v[2] = v[3] = i = k = 0;					// accum., counters, registers
CYCLE( cur, "Firm1" )
{
	v[4] = VS( cur, "_NW1" );					// current net wealth
	
	if ( VS( cur, "_public1" ) )				// public firms don't exit
	{
		if ( v[4] < 0 )							// provide more equity if needed
		{
			// new equity required
			v[6] = NW10u + VS( cur, "_Deb1" ) - VS( cur, "_NW1" );
			v[1] += v[6];						// accumulate "entry" equity cost
			
			WRITES( cur, "_Deb1", 0 );			// reset debt
			INCRS( cur, "_NW1", v[6] );			// add new equity
		}
	}
	else
		if ( v[4] < 0 || T >= VS( cur, "_t1ent" ) + n1 )// bankrupt or incumbent?
		{
			for ( v[5] = j = 0; j < n1; ++j )
				v[5] += VLS( cur, "_BC", j );	// n1 periods customer number
			
			if ( v[4] < 0 || v[5] <= 0 )
			{
				quit[ i ] = true;				// mark for likely exit
				--h;							// one less firm
				
				if ( v[5] > v[3] )				// best firm so far?
				{
					k = i;						// save firm index
					v[3] = v[5];				// and customer number
				}
			}
		}
	
	++i;
}	

// quit candidate firms exit, except the best one if all going to quit
i = j = 0;										// firm counters
CYCLE_SAFE( cur, "Firm1" )
{
	if ( quit[ i ] )
	{
		if ( h > 0 || i != k )					// firm must exit?
		{
			// account liquidation credit due to public, if any
			v[2] += exit_firm1( cur );			// delete object and liq. val.
			++j;								// count exits
		}
		else
			if ( h == 0 && i == k )				// best firm must get new equity
			{
				// new equity required
				v[6] = NW10u + VS( cur, "_Deb1" ) - VS( cur, "_NW1" );
				v[1] += v[6];					// accumulate "entry" equity cost
				
				WRITES( cur, "_Deb1", 0 );		// reset debt
				INCRS( cur, "_NW1", v[6] );		// add new equity
			}
	}

	++i;
}

V( "f1rescale" );								// redistribute exiting m.s.

// compute the potential number of entrants
v[7] = ( MC1_1 == 0 ) ? 0 : MC1 / MC1_1 - 1;// change in market conditions

k = max( 0, ceil( F1 * ( ( 1 - omicron ) * uniform( x2inf, x2sup ) + 
						 omicron * min( max( v[7], x2inf ), x2sup ) ) ) );
				 
// apply return-to-the-average stickiness random shock to the number of entrants
k -= min( RND * stick * ( ( double ) ( F1 - j ) / F10 - 1 ) * F10, k );

// ensure limits are enforced to the number of entrants
if ( F1 - j + k < F1min )
	k = F1min - F1 + j;

if ( F1 + k > F1max )
	k = F1max - F1 + j;

v[0] = k - j;									// net number of entrants
v[1] += entry_firm1( p, k, 0, false );			// add entrant-firm objects

i = INCR( "F1", v[0] );							// update the number of firms
INCRS( PARENT, "cEntry", v[1] );				// account equity cost of entry
INCRS( PARENT, "cExit", v[2] );					// account exit credits
WRITE( "exit1", ( double ) j / F1 );
WRITE( "entry1", ( double ) k / F1 );

V( "f1rescale" );								// redistribute entrant m.s.
INIT_TSEARCHT( "Firm1", i );					// prepare turbo search indexing

RESULT( v[0] )


/*============================ SUPPORT EQUATIONS =============================*/

EQUATION( "A1" )
/*
Productivity of capital-good sector
*/
V( "PPI" );										// ensure m.s. are updated
RESULT( WHTAVE( "_Btau", "_f1" ) )


EQUATION( "D1" )
/*
Potential demand (orders) received by firms in capital-good sector
*/
RESULT( SUM( "_D1" ) )


EQUATION( "Deb1" )
/*
Total debt of capital-good sector
*/
RESULT( SUM( "_Deb1" ) )


EQUATION( "Div1" )
/*
Total dividends paid by firms in capital-good sector
*/
V( "Tax1" );									// ensure dividends are computed
RESULT( SUM( "_Div1" ) )


EQUATION( "F1" )
/*
Number of firms in capital-good sector
*/
RESULT( COUNT( "Firm1" ) )


EQUATION( "JO1" )
/*
Open job positions in capital-good sector
*/
RESULT( SUM( "_JO1" ) )


EQUATION( "L1d" )
/*
Total labor demand from firms in capital-good sector
Includes R&D labor
*/
RESULT( SUM( "_L1d" ) )


EQUATION( "L1dRD" )
/*
R&D labor demand from firms in capital-good sector
*/
RESULT( SUM( "_L1dRD" ) )


EQUATION( "L1rd" )
/*
Total R&D labor employed by firms in capital-good sector
*/
RESULT( min( V( "L1dRD" ), VS( LABSUPL1, "Ls" ) * V( "L1rdMax" ) ) )


EQUATION( "NW1" )
/*
Total net wealth (free cash) of firms in capital-good sector
*/
RESULT( SUM( "_NW1" ) )


EQUATION( "Pi1" )
/*
Total profits of capital-good sector
*/
RESULT( SUM( "_Pi1" ) )


EQUATION( "PPI" )
/*
Producer price index
*/
V( "f1rescale" );								// ensure m.s. computed/rescaled
RESULT( WHTAVE( "_p1", "_f1" ) )


EQUATION( "Q1" )
/*
Total planned output of firms in capital-good sector
*/
RESULT( SUM( "_Q1" ) )


EQUATION( "Q1e" )
/*
Total effective real output (orders) of capital-good sector
*/
RESULT( SUM( "_Q1e" ) )


EQUATION( "S1" )
/*
Total sales of capital-good sector
*/
RESULT( SUM( "_S1" ) )


EQUATION( "Tax1" )
/*
Total taxes paid by firms in capital-good sector
*/
RESULT( SUM( "_Tax1" ) )


EQUATION( "W1" )
/*
Total wages paid by firms in capital-good sector
*/
RESULT( SUM( "_W1" ) )


EQUATION( "imi" )
/*
Imitation success rate in capital-good sector
Also ensures all innovation/imitation is done, brochures are distributed and
learning-by-doing skills are updated
*/
SUM( "_Atau" );									// ensure innovation is done
SUM( "_NC" );									// ensure brochures distributed
RESULT( SUM( "_imi" ) / V( "F1" ) )


EQUATION( "inn" )
/*
Innovation success rate in capital-good sector
Also ensures all innovation/imitation is done, brochures are distributed and
learning-by-doing skills are updated
*/
V( "imi" );										// ensure innovation is done
RESULT( SUM( "_inn" ) / V( "F1" ) )


/*========================== SUPPORT LSD FUNCTIONS ===========================*/

EQUATION( "f1rescale" )
/*
Rescale market shares in capital-good sector to ensure adding to 1
To be called after market shares are changed in '_f1' and 'entry1exit'
*/

v[1] = SUM( "_f1" );							// add-up market shares

if ( ROUND( v[1], 1, 0.001 ) == 1.0 )			// ignore rounding errors
	END_EQUATION( v[1] );

v[0] = 0;										// accumulator

if ( v[1] > 0 )									// production ok?
	CYCLE( cur, "Firm1" )						// rescale to add-up to 1
	{
		v[0] += v[2] = VS( cur, "_f1" ) / v[1];	// rescaled market share
		WRITES( cur, "_f1", v[2] );				// save updated m.s.
	}
else
{
	v[2] = 1 / COUNT( "Firm1" );				// firm fair share
	
	CYCLE( cur, "Firm1" )						// rescale to add-up to 1
	{
		v[0] += v[2];
		WRITES( cur, "_f1", v[2] );
	}
}

RESULT( v[0] )


/*============================= DUMMY EQUATIONS ==============================*/

EQUATION_DUMMY( "entry1", "entry1exit" )
/*
Rate of entering firms in capital-good sector
Updated in 'entry1exit'
*/

EQUATION_DUMMY( "exit1", "entry1exit" )
/*
Rate of exiting firms in capital-good sector
Updated in 'entry1exit'
*/

EQUATION_DUMMY( "exit1fail", "entry1exit" )
/*
Rate of bankrupt firms in capital-good sector
Updated in 'entry1exit'
*/

//////////////////////
/* 
IMPLEMENTATION OF THE PUBLIC FIRM - SPECIAL RULES.
EXPERIMENT 4: Public Firm
There is now the addition of a Public Firm in the system that invests all its profit on R&D, and that freely diffuses its technology to the other firms.
// 1) Firm invest as top invester (reinvest all its profits)
// 2) Everyone can immitate the public firm

On Francescoâ€™s code:
RD(1,1)=nu_state*S1(1,1);
 Everyone can imitate firm 1
if ( ((1+mi1)*w(1)/(A1pimm(i)*a))*(w(1)/A1imm(i))*b >= ((1+mi1)*w(1)/(A1p(1)*a))*(w(1)/A1(1))*b ) 
	A1imm(i)=A1(1); 
	A1pimm(i)=A1p(1); 
	uu5(i)=uu5(1); 
	uu6(i)=uu6(1);
	Employment on firm 1: employment_state_firm=(Ld1(1)+Ld1rd(1))/LD;
void MACRO(void)
if (flag_entr_state==4)
	 {
	 	Def=G(1)-Tax-Pi1(1)+expenses_nofailure_state_firm;
	 }
void TECHANGEND(void)
			if (flag_entr_state==4 && S1(1,1)==0)  		// If it is the case of state firm it invest as the top invester
			{
				max_rd=2;
				for (int i = 2; i <=N1; ++i)
				{
					if (RD_nom(2,i)>=RD_nom(2,max_rd)){max_rd=i;}					
				}
				RD_nom(1,1)=RD_nom(2,max_rd);
			}
if (flag_entr_state==4)
		{
			RD(1,1)=nu_state*S1(1,1);
		}

//////////////////
EXPERIMENT 5:NATIONAL RESEARCH LAB
The NRL increase technological opportunities, doing radical innovations. It is not a public firm itself, it has a different dynamics.
//National Research Lab
// My interpretation of Francesco's code

// Idea: implement a National Research Lab in the K+S

/* 
There are two main objectives in this exercize. 

First is to implement a public capital-good firm, capable of freely diffusing knowledge and that reinvest all its profits. For that I am using this f1p

Second objective is a National Research Lab, that is not a firm on the same sense as the public and private ones. It is mainly a public funded laboratory that increase tecnology opportunities (change x1inf and x1sup)
*/



EQUATION( "RD_ES" ) //R&D used for radical innovations.
v[0]= V("xi_ES"); // xi parameter for the NRL 
v[1]= VS( PARENT, "GDP" ); //GDP
v[2]=v[0]*v[1]; // Invest part of the GDP in the NRL
RESULT(v[2])




EQUATION( "x1infNRL" ) //radical innovation - increase technological opportunities (also updates x1sup)

v[0] = V("RD_ES"); 

v[1] = 1 - exp( - V("zeta_ES") * v[0] ); //Zeta_ES is the Zeta for radical innovations. v[1] is the bernoulli parameter


if ( bernoulli( v[1] )==1 )						// radical innovation succeeded?
{
	double alpha1_ES = V("alpha1_ES");		// beta distrib. alpha parameter for radical innovations
	double beta1_ES = V("beta1_ES");		// beta distrib. beta parameter for radical innovations
	double x1inf_ES = V("x1inf_ES");		// lower beta inno. draw support for radical innovations
	double x1sup_ES = V("x1sup_ES");		// upper beta inno. draw support for radical innovations
	
	v[2]=beta(alpha1_ES, beta1_ES ); // Parameter of Technological Opportunities
	v[3]= x1inf_ES + v[2] * ( x1sup_ES - x1inf_ES  ); //New value for Technological Opportunities
}
 	
 	 double x1supNRL = V("x1supNRL");
 	v[4]= CURRENT * (1+v[3]/2); //MULTIPLICATION IS NOT WORKING HERE
 	v[5]= x1supNRL * (1+v[3]/2); //MULTIPLICATION IS NOT WORKING HERE
 

  //v[5]= V("x1sup")*(1+v[3]/2);
	
	WRITE("x1supNRL", v[5] );

RESULT( v[4] )



EQUATION_DUMMY( "x1supNRL", "" )
/* 

/////////////////////
//EXPERIMENTS 1 AND 2 BY FRANCESCO
/*
EXPERIMENT 1: Include subsidy to R&D Activities. In this experiment Francesco adds an Î± subsidy to spendings in RD: RD_sub=RD*(1+Î±).
In Francescoâ€™s code:
flag_entr_state == 1
void MACRO(void)	
if (flag_entr_state==1 || flag_entr_state==3)
	 {
	 	Def+=total_RD_sub;
	 }
void TECHANGEND(void) // Cambiamento Tecnico Endogeno
if (flag_entr_state==1 || flag_entr_state==3)
		{
			//RD_sub(i)=RD_sub_share*GDP(2)/N1;
			RD_sub(i)=RD(1,i)*alpha_RD;
			RD(1,i)=RD(1,i)+RD_sub(i);
			total_RD_sub += RD_sub(i);
		}

EXPERIMENT 2: Tax incentives to investments// Investment Discounts)
Firm j buy new machine if, and only if:
	(p^(new,B)*(1-Î²))/(c_j^con (t)-c^new )â‰¤b 	
In the code:
flag_entr_state == 2
void SCRAPPING(void)	
if (flag_entr_state==2)
				{
					if (w(2) > 0 && A(tt,i) > 0 && A1(indforn) > 0)
					
					payback=p1(1,indforn)*(1-beta_disc)/(w(2)/A(tt,i)-w(2)/A1(indforn));

					else cerr << "\n\n ERRORE: payback divisione per zero!!!" << endl;
				}
// Entrepreneurial state -- invest discounts -- public cost
					if (flag_entr_state==2)
					{
						disc_cost(j) = (SId(j)/dim_mach)*p1(1,indforn)*beta_disc;
						total_public_cost_disc += disc_cost(j);
					}
void PRODORD(void)	
// Entrepreneurial state - invest disc
	if (flag_entr_state==2)
	{
			if ( (SId(j)/dim_mach)*p1prova*(1-beta_disc) < NW)
	{
		SI(1,j)=SId(j);
	}
	else 
	{	if ((SId(j)/dim_mach)*p1prova*(1-beta_disc)-NW <= prestmax) 	{
			SI(1,j)=SId(j);
		}
		else 
		{
			SI(1,j)=floor((NW + prestmax)/p1(1,indforn))*dim_mach;
		}
*/









// From now on it is only trash and things to think about.

/*
IMPLEMENTATION OF THE PUBLIC FIRM - SPECIAL RULES.
EXPERIMENT 4: Public Firm
There is now the addition of a Public Firm in the system that invests all its profit on R&D, and that freely diffuses its technology to the other firms.
On Francescoâ€™s code:
RD(1,1)=nu_state*S1(1,1);
 Everyone can imitate firm 1
if ( ((1+mi1)*w(1)/(A1pimm(i)*a))*(w(1)/A1imm(i))*b >= ((1+mi1)*w(1)/(A1p(1)*a))*(w(1)/A1(1))*b ) 
	A1imm(i)=A1(1); A1pimm(i)=A1p(1); uu5(i)=uu5(1); uu6(i)=uu6(1);
	Employment on firm 1: employment_state_firm=(Ld1(1)+Ld1rd(1))/LD;
	
void MACRO(void)
if (flag_entr_state==4)
	 {
	 	Def=G(1)-Tax-Pi1(1)+expenses_nofailure_state_firm;
	 }
void TECHANGEND(void)
			if (flag_entr_state==4 && S1(1,1)==0)  		// If it is the case of state firm it invest as the top invester
			{
				max_rd=2;
				for (int i = 2; i <=N1; ++i)
				{
					if (RD_nom(2,i)>=RD_nom(2,max_rd)){max_rd=i;}					
				}
				RD_nom(1,1)=RD_nom(2,max_rd);
			}
if (flag_entr_state==4)
		{
			RD(1,1)=nu_state*S1(1,1);
		}


REPETITION OF WHAT IS ABOVE:
Experiment 5. NATIONAL RESEARCH LAB

void MACRO(void)
if (flag_entr_state==5)
	 {
	 	Def=G(1)-Tax-Pi1(1)+expenses_nofailure_state_firm+RD_entr_state;
	 }
void TECHANGEND(void)
if (flag_entr_state==5 && i==1)
	   {	RD_entr_state=share_GDP_RD_entr_state*GDP(2);
			RD(1,1)=nu_state*S1(1,1)*(1-share_enlarge_opp); // invest in standard RD
			tot_RD_state_enlarge= RD(1,1)*share_enlarge_opp+RD_entr_state;
			CUM_RD_entr_state += tot_RD_state_enlarge;
		if (flag_entr_state_logistic==0) // no logistic
		{				
			parber_entr_state=1-exp(-o1_ent_state*CUM_RD_entr_state);														
			Inn_entr_state=bnldev(parber_entr_state,1,p_seed);
		}
		else // use of the logistic
		{
			logistic_value = 1/(1+exp(logistic_1*(CUM_RD_entr_state-logistic_2)));
			parber_entr_state=1-exp(-o1_ent_state_logistic*logistic_value);									
			Inn_entr_state=bnldev(parber_entr_state,1,p_seed);
		}
		if (Inn_entr_state==1)
		{		rnd_entr_state=betadev(b_a1_opp,b_b1_opp,p_seed);					
				rnd_entr_state=change_uu5_entr_state+rnd*(change_uu6_entr_state-change_uu5_entr_state);						
				uu5(1)=uu5(1)*(1+rnd_entr_state/2);
				uu6(1)=uu6(1)*(1+rnd_entr_state/2);
				CUM_RD_entr_state=0; 				// reset the cumulative RD		}
		cout << "Entr state innovation success " << Inn_entr_state << endl;
		cout << "Entr state rnd_entr_state " << rnd_entr_state << endl;
		if (flag_entr_state_logistic==1)
		{
			cout << "value of the logistic curve" << logistic_value;
		}
		cout << "uu6" << uu6(1) << endl;
		cout << "mkt share state firm" << f1(1,1) << endl;
		cout << "prod state firm" << A1p(1) << endl;
		cout << "prod media" << Am1 << endl;
		cout << "profitti impresa stato" << Pi1(1); 
	   } // end experiment 5

*/

/*
//Reset the cumulative RD: 
//(11)	 CUM_RD_entr_state=0;
	v[4]
}
else
	v[2] = v[3] = 0;							// innovation failure


*/

// 
//RD_NRL = _S1*(xi_EOP)

//RD_EOP = RD_ES+RD_NRL
//CUM_RD_EOP=+RD_EOP

//Parber_ES = 1-exp(-01_ES*CUM_RD_EOP)

//INN_ES = Bernoulli(Parber_ES)
//If (INN_ES==1)
//PAR_TO=beta(a,b)
//TO=change_xinf+PAR_TO*(change_xsup-change_xinf)

//x1inf= uu5(1)*(1+rnd_entr_state/2); 
//x1sup=uu6(1)=uu6(1)*(1+rnd_entr_state/2);

// Francesco's code:
//R&D spending share for total firms: 
//(1)	RD_entr_state=share_GDP_RD_entr_state*GDP(2);
//NRL (firm 1) spends part of its sales in RD: 
//(2)	RD(1,1)=nu_state*S1(1,1)*(1-share_enlarge_opp); 
//The total RD to enlarge opportunities is the share of firm 1 and the share of all other firms that can generate radical innovations
//(3)	tot_RD_state_enlarge= RD(1,1)*share_enlarge_opp+RD_entr_state; 
//There is cummulative RD of the entrepreneurial state: 
//(4)	CUM_RD_entr_state += tot_RD_state_enlarge;
//The cummulative (CUM_RD_entr_state) is a parameter for the bernoulli: 
//(5)	parber_entr_state=1-exp(-o1_ent_state*CUM_RD_entr_state);				
//Define if a radical innovation is succesfull: 
//(6)	Inn_entr_state=bnldev(parber_entr_state,1,p_seed);
//(7)	If Inn_entr_state==1
//Then the radical innovation succeeds
//Amount of increase in the technological opportunities as a beta distribution:   
//(8)	 rnd_entr_state=betadev(b_a1_opp,b_b1_opp,p_seed);	
//Put it in the scale (x1inf,x1sup):
//(9)	 rnd_entr_state=change_uu5_entr_state+rnd *(change_uu6_entr_state-change_uu5_entr_state); 
//Increase values of the technology opportunities: 
//(10)	uu5(1)= uu5(1)*(1+rnd_entr_state/2); uu6(1)=uu6(1)*(1+rnd_entr_state/2);
//Reset the cumulative RD: 
//(11)	 CUM_RD_entr_state=0;











// Entrepreneurial State Experiments

  /* 
  
	for (i=1; i<=N1; i++)
	{	
		
		
		RD_nom(1,i)=nu*S1(1,i);
			
														// Allocazione risorse R&D				
		if (S1(1,i)==0)								// Se nel periodo precedente clienti non hanno investito,
		{											// impresa investe in RD come nel periodo precedente
			RD_nom(1,i)=RD_nom(2,i);						// Ciâ€šÃ Ã¶â€šÃ¢Â§ accade anche nel periodo t+1 alle imprese
			if (nclient(i) < 1)						// entrate al tempo t (perchâ€šÃ Ã¶Â¬Ã† c'â€šÃ Ã¶Â¬Ã† time-to-build)
			{
				cerr << "\n\n ERRORE: nclinet < 1!!!" << endl;
			}


			if (flag_entr_state==4 && S1(1,1)==0)  		// If it is the case of state firm it invest as the top invester
			{
				max_rd=2;
				for (int i = 2; i <=N1; ++i)
				{
					if (RD_nom(2,i)>=RD_nom(2,max_rd)){max_rd=i;}
					
				}
				RD_nom(1,1)=RD_nom(2,max_rd);

			}
		}
		
		if (w(1)>0)
			Ld1rd(i)=RD_nom(1,i)/w(1);								// Domanda lavoratori R&D
		else cerr << "\n\n ERRORE: w=0!!!" << endl;
        

      if (flagRD==0)
      {
        RD(1,i)=RD_nom(1,i);
      }
      else
      {
      	RD(1,i)=Ld1rd(i);
      }

	
						
		
		total_RD_economy += RD(1,i);							
		
		// Entrepreneural State
		if (flag_entr_state==4)
		{
			RD(1,1)=nu_state*S1(1,1); // State firm is the 1st in the vector
		}

		
		if (flag_entr_state==1 || flag_entr_state==3)
		{
			//RD_sub(i)=RD_sub_share*GDP(2)/N1;
			RD_sub(i)=RD(1,i)*alpha_RD;
			RD(1,i)=RD(1,i)+RD_sub(i);
			total_RD_sub += RD_sub(i);
		}

	
			if (flag_entr_state==5 && i==1)
	   {
		
			RD_entr_state=share_GDP_RD_entr_state*GDP(2);

			RD(1,1)=nu_state*S1(1,1)*(1-share_enlarge_opp); // invest in standard RD

			tot_RD_state_enlarge= RD(1,1)*share_enlarge_opp+RD_entr_state;

			CUM_RD_entr_state += tot_RD_state_enlarge;

		if (flag_entr_state_logistic==0) // no logistic
		{				

			parber_entr_state=1-exp(-o1_ent_state*CUM_RD_entr_state);							
											
			Inn_entr_state=bnldev(parber_entr_state,1,p_seed);
		}
		else // use of the logistic
		{
			logistic_value = 1/(1+exp(logistic_1*(CUM_RD_entr_state-logistic_2)));

			parber_entr_state=1-exp(-o1_ent_state_logistic*logistic_value);							
											
			Inn_entr_state=bnldev(parber_entr_state,1,p_seed);

		}

		if (Inn_entr_state==1)
		{
				rnd_entr_state=betadev(b_a1_opp,b_b1_opp,p_seed);					
				rnd_entr_state=change_uu5_entr_state+rnd*(change_uu6_entr_state-change_uu5_entr_state);						
				uu5(1)=uu5(1)*(1+rnd_entr_state/2);
				uu6(1)=uu6(1)*(1+rnd_entr_state/2);
				CUM_RD_entr_state=0; 				// reset the cumulative RD
		}
		

		cout << "Entr state innovation success " << Inn_entr_state << endl;
		cout << "Entr state rnd_entr_state " << rnd_entr_state << endl;
		if (flag_entr_state_logistic==1)
		{
			cout << "value of the logistic curve" << logistic_value;
		}
		cout << "uu6" << uu6(1) << endl;
		cout << "mkt share state firm" << f1(1,1) << endl;
		cout << "prod state firm" << A1p(1) << endl;
		cout << "prod media" << Am1 << endl;
		cout << "profitti impresa stato" << Pi1(1); 


	   } // end experiment 5
	   
	   */ 
